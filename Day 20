I have solved some problems on Hackerrank
1---Merge two sorted linked lists

# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#

def mergeLists(head1, head2):
    node=SinglyLinkedListNode(0)
    head=node
    temp=head
    while True:
        if head1 is None:
            head.next=head2
            break
        if head2 is None:
            head.next=head1
            break
        if head1.data>head2.data:
            head.next=head2
            head=head2
            head2=head2.next
        else:
            head.next=head1
            head=head1 
            head1=head1.next       
    return temp.next        
2---Get Node Value

def getNode(head, positionFromTail):
    count=head
    pt=None
    if head is None:
        return
    while count !=None:
        next=count.next
        count.next=pt
        pt=count
        count=next
    head1=pt    
    if positionFromTail==0:
        return head1.data
    i=0   
    while i<=positionFromTail :
        if i==positionFromTail:
            return head1.data
        else:
            head1=head1.next 
            print(head.data)  
        i=i+1
3---Delete duplicate-value nodes from a sorted linked list

def removeDuplicates(head):
    temp = head
    if head is None:
        return
    if head.next is None:
        return temp
    while temp.next is not None:
        if temp.data == temp.next.data:
            new = temp.next.next
            temp.next = None
            temp.next = new
        else:
            temp = temp.next
    return head
4---Cycle Detection

def has_cycle(head):
    sp=head
    fp=head
    while sp and fp and fp.next is not None:
        sp=sp.next
        fp=fp.next.next
        if sp==fp:
            return 1
    return 0    

5--Find Merge Point of Two Lists
def findMergeNode(head1, head2):
    temp2=head2
    temp1=head1
    while temp1!=temp2:
        if temp1==None:
            temp1=head2
        else:
            temp1=temp1.next
                
        if temp2==None:
            temp2=head1
        else:
            temp2=temp2.next    
    return temp1.data  
    
   6---Inserting a Node Into a Sorted Doubly Linked List
   
   def sortedInsert(head, data):
    node=DoublyLinkedListNode(data)
    temp=head
    if head==None:
        head=node
        head.next=None
        return head
    elif head.data>=data:
        head.prev=node
        node.next=head
        return node
   7---Reverse a doubly linked list

def reverse(head):
    current=head
    if head is None:
        return
    else:
        while current!=None:
            next=current.next
            prev=current.prev
            current.next=prev
            prev=current
            current=next
        return prev 
8---Tree: Preorder Traversal

def preOrder(root):
    #Write your code here
            
    if root:
        print(root.info,end=' ')
        preOrder(root.left)
        preOrder(root.right) 
9---Tree: Postorder Traversal

def postOrder(root):
    #Write your code here
    if root:
        postOrder(root.left)
        postOrder(root.right)
        print(root.info,end=' ')
        
10---Tree: Inorder Traversal

def inOrder(root):
    #Write your code here
    if root:
        inOrder(root.left)
        print(root.info,end=' ')
        inOrder(root.right)        
        
